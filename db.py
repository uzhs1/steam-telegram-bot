import asyncpg

import config


class Database:
    def __init__(self, pool):
        self.pool = pool

    @classmethod
    async def create(cls):
        pool = await asyncpg.create_pool(
            user=config.DB_USER,
            password=config.DB_PASSWORD,
            host=config.DB_HOST
        )
        return cls(pool)

    async def create_table(self):
        sql = '''
            CREATE TABLE IF NOT EXISTS Users (
                id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                Telegram_id BIGINT UNIQUE NOT NULL,
                Balance INTEGER NOT NULL,
                Transactions text[] 
            )
        '''
        await self.pool.execute(sql)

    async def create_values_table(self):
        sql = '''
            CREATE TABLE IF NOT EXISTS Values (
                id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                user_buy_price numeric(6, 2) DEFAULT 1.65,
                user_sell_price numeric(6, 2) DEFAULT 1.55,
                user_max_buy_keys int DEFAULT 50,
                user_max_sell_keys int DEFAULT 50
            )
        '''
        await self.pool.execute(sql)

    async def create_table_offers(self):
        sql = '''
            CREATE TABLE IF NOT EXISTS Offers (
                id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                user_is_buy_keys boolean,
                user_is_sell_keys boolean,
                key_price numeric(6, 2),
                count_keys int,
                offer_time date
            )
        '''
        await self.pool.execute(sql)

    async def create_user(self, telegram_id: int):
        sql = 'INSERT INTO Users (Telegram_id, Balance) VALUES ($1, $2)'
        await self.pool.execute(sql, telegram_id, 0)

    async def update_transaction(self, telegram_id: int, tx_id: str):
        sql = 'UPDATE Users SET Transactions = array_append(Transactions, $1) WHERE Telegram_id = $2'
        return await self.pool.execute(sql, tx_id, telegram_id)

    async def plus_balance(self, telegram_id: int, balance: int):
        sql = 'UPDATE Users SET Balance = Balance + ROUND($1, 1) WHERE Telegram_id = $2'
        await self.pool.execute(sql, balance, telegram_id)

    async def minus_balance(self, telegram_id: int, minus_value: int):
        sql = 'UPDATE Users SET Balance = Balance - $1 WHERE Telegram_id = $2'
        await self.pool.execute(sql, minus_value, telegram_id)

    async def get_balance(self, telegram_id: int):
        sql = 'SELECT * FROM Users WHERE Telegram_id = $1'
        return await self.pool.fetchrow(sql, telegram_id)

    async def check_transactions(self, tx_id: str):
        sql = 'SELECT * FROM Users WHERE $1 = ANY(Transactions)'
        return await self.pool.execute(sql, tx_id)

    async def insert_default_values(self):
        sql = '''
        INSERT INTO Values (
            user_buy_price, user_sell_price, user_max_buy_keys, user_max_sell_keys
        ) VALUES ($1, $2, $3, $4)
        '''
        await self.pool.execute(sql, 1.65, 1.55, 50, 10)

    async def update_user_buy_price(self, new_price: float):
        sql = 'UPDATE Values SET user_buy_price = $1 WHERE id = $2'
        await self.pool.execute(sql, new_price, 1)

    async def update_user_sell_price(self, new_price: float):
        sql = 'UPDATE Values SET user_sell_price = $1 WHERE id = $2'
        await self.pool.execute(sql, new_price, 1)

    async def update_user_max_buy(self, new_max_value: float):
        sql = 'UPDATE Values SET user_max_buy_keys = $1 WHERE id = $2'
        await self.pool.execute(sql, new_max_value, 1)

    async def update_user_max_sell(self, new_min_value: float):
        sql = 'UPDATE Values SET user_max_sell_keys = $1 WHERE id = $2'
        await self.pool.execute(sql, new_min_value, 1)

    async def get_values(self):
        sql = 'SELECT * FROM Values WHERE id = $1'
        return await self.pool.fetchrow(sql, 1)

    async def insert_offer(self):
        pass


